from django.db import models
import uuid
import os
import os.path
from PIL import Image
import datetime
from math import floor
from django.utils.timezone import utc
from django.utils.translation import ugettext_lazy as _
from django.db.models import Max, Min
from tigacrafting.models import CrowdcraftingTask, MoveLabAnnotation, ExpertReportAnnotation
from django.db.models import Count
from django.conf import settings
from django.db.models import Q
from django.contrib.auth.models import User, Group
from tigacrafting.models import SITE_CATEGORIES, TIGER_CATEGORIES, STATUS_CATEGORIES
from collections import Counter


class TigaUser(models.Model):
    user_UUID = models.CharField(max_length=36, primary_key=True, help_text='UUID randomly generated on '
                                                                            'phone to identify each unique user. Must be exactly 36 '
                                                                            'characters (32 hex digits plus 4 hyphens).')
    registration_time = models.DateTimeField(auto_now=True, help_text='The date and time when user '
                                                                      'registered and consented to sharing '
                                                                 'data. Automatically set by '
                                                                 'server when user uploads registration.')

    def __unicode__(self):
        return self.user_UUID

    def number_of_reports_uploaded(self):
        return Report.objects.filter(user=self).count()

    def is_ios(self):
        return self.user_UUID.isupper()

    n_reports = property(number_of_reports_uploaded)
    ios_user = property(is_ios)

    class Meta:
        verbose_name = "user"
        verbose_name_plural = "users"


class Mission(models.Model):
    id = models.AutoField(primary_key=True, help_text='Unique identifier of the mission. Automatically generated by ' \
                                                  'server when mission created.')
    title_catalan = models.CharField(max_length=200, help_text='Title of mission in Catalan')
    title_spanish = models.CharField(max_length=200, help_text='Title of mission in Spanish')
    title_english = models.CharField(max_length=200, help_text='Title of mission in English')
    short_description_catalan = models.CharField(max_length=200, help_text='Catalan text to be displayed '
                                                                                       'in mission '
                                                                           'list.')
    short_description_spanish = models.CharField(max_length=200, help_text='Spanish text to be displayed '
                                                                                      'in mission '
                                                                           'list.')
    short_description_english = models.CharField(max_length=200, help_text='English text to be displayed '
                                                                                      'in mission '
                                                                           'list.')
    long_description_catalan = models.CharField(max_length=1000, blank=True, help_text='Catalan text that fully ' \
                                                                                     'explains '
                                                                             'mission '
                                                                           'to '
                                                                           'user')
    long_description_spanish = models.CharField(max_length=1000, blank=True, help_text='Spanish text that fully ' \
                                                                                     'explains mission '
                                                                           'to user')
    long_description_english = models.CharField(max_length=1000, blank=True, help_text='English text that fully ' \
                                                                                     'explains mission '
                                                                           'to user')
    help_text_catalan = models.TextField(blank=True, help_text='Catalan text to be displayed when user taps mission '
                                                               'help '
                                                               'button.')
    help_text_spanish = models.TextField(blank=True, help_text='Spanish text to be displayed when user taps mission '
                                                               'help '
                                                               'button.')
    help_text_english = models.TextField(blank=True, help_text='English text to be displayed when user taps mission '
                                                               'help '
                                                               'button.')
    PLATFORM_CHOICES = (('none', 'No platforms (for drafts)'), ('and', 'Android'), ('ios', 'iOS'), ('html', 'HTML5'), ('beta', 'beta versions only'), ('all',
                                                                                               'All platforms'),)
    platform = models.CharField(max_length=4, choices=PLATFORM_CHOICES, help_text='What type of device is this '
                                                                                   'mission is intended for? It will '
                                                                                   'be sent only to these devices')
    creation_time = models.DateTimeField(auto_now=True, help_text='Date and time mission was created by MoveLab. '
                                                                  'Automatically generated when mission saved.')
    expiration_time = models.DateTimeField(blank=True, null=True, help_text='Optional date and time when mission '
                                                                            'should expire (if ever). Mission will no longer be displayed to users after this date-time.')

    photo_mission = models.BooleanField(help_text='Should this mission allow users to attach photos to their '
                                                  'responses? (True/False).')
    url = models.URLField(blank=True, help_text='Optional URL that wll be displayed to user for this mission. (The '
                                                'entire mission can consist of user going to that URL and performing '
                                                'some action there. For security reasons, this URL must be within a '
                                                'MoveLab domain.')
    mission_version = models.IntegerField(blank=True, null=True)

    def __unicode__(self):
        return self.title_catalan

    def active_missions(self):
        return self.expiration_time >= datetime.datetime.utcnow().replace(tzinfo=utc)


class MissionTrigger(models.Model):
    mission = models.ForeignKey(Mission, related_name='triggers')
    lat_lower_bound = models.FloatField(blank=True, null=True, help_text='Optional lower-bound latitude for '
                                                                         'triggering mission to appear to user. Given in decimal degrees.')
    lat_upper_bound = models.FloatField(blank=True, null=True, help_text='Optional upper-bound latitude for '
                                                                         'triggering mission to appear to user. Given in decimal degrees.')
    lon_lower_bound = models.FloatField(blank=True, null=True, help_text='Optional lower-bound longitude for '
                                                                         'triggering mission to appear to user. Given in decimal degrees.')
    lon_upper_bound = models.FloatField(blank=True, null=True, help_text='Optional upper-bound longitude for '
                                                                         'triggering mission to appear to user. Given in decimal degrees.')
    time_lowerbound = models.TimeField(blank=True, null=True, help_text='Lower bound of optional time-of-day window '
                                                                        'for triggering mission. If '
                                                                        'location trigger also is specified, mission will '
                                                                        'be triggered only '
                                                                        'if user is found in that location within the window; if '
                                                                        'location is not specified, the mission will '
                                                                        'be triggered for all users who have their phones on during the '
                                                                        'time window. Given as time without date, '
                                                                        'formatted as ISO 8601 time string (e.g. '
                                                                        '"12:34:00") with no time zone specified (trigger '
                                                                        'is always based on local time zone of user.)')
    time_upperbound = models.TimeField(blank=True, null=True, help_text='Lower bound of optional time-of-day window '
                                                                        'for triggering mission. If '
                                                                        'location trigger also is specified, mission will '
                                                                        'be triggered only if user is found in that location within the window; if '
                                                                        'location is not specified, the mission will be '
                                                                        'triggered for all users who have their phones on during the '
                                                                        'time window. Given as time without date, '
                                                                        'formatted as ISO 8601 time string (e.g. '
                                                                        '"12:34:00") with no time zone specified (trigger '
                                                                        'is always based on local time zone of user.)')


class MissionItem(models.Model):
    mission = models.ForeignKey(Mission, related_name='items', help_text='Mission to which this item is associated.')
    question_catalan = models.CharField(max_length=1000, help_text='Question displayed to user in Catalan.')
    question_spanish = models.CharField(max_length=1000, help_text='Question displayed to user in Spanish.')
    question_english = models.CharField(max_length=1000, help_text='Question displayed to user in English.')
    answer_choices_catalan = models.CharField(max_length=1000, help_text='Response choices in Catalan, wrapped in quotes, comma separated and in square brackets (e.g., ["yes", "no"]).')
    answer_choices_spanish = models.CharField(max_length=1000, help_text='Response choices in Catalan, wrapped in quotes, comma separated and in square brackets (e.g., ["yes", "no"]).')
    answer_choices_english = models.CharField(max_length=1000, help_text='Response choices in Catalan, wrapped in quotes, comma separated and in square brackets (e.g., ["yes", "no"]).')
    help_text_catalan = models.TextField(blank=True, help_text='Catalan help text displayed to user for this item.')
    help_text_spanish = models.TextField(blank=True, help_text='Spanish help text displayed to user for this item.')
    help_text_english = models.TextField(blank=True, help_text='English help text displayed to user for this item.')
    prepositioned_image_reference = models.IntegerField(blank=True, null=True, help_text='Optional image '
                                                                                         'displayed to user '
                                                                                         'within the help '
                                                                                         'message. Integer '
                                                                                         'reference to image '
                                                                                         'prepositioned on device.')
    attached_image = models.ImageField(upload_to='tigaserver_mission_images', blank=True, null=True,
                                       help_text='Optional Image displayed to user within the help message. File.')

class ReportManager(models.Manager):
    def reports_pending_by_one(self):
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("""
            SELECT * FROM public.tigaserver_app_report
        """)
        result_list = []
        for row in cursor.fetchall():
            p = self.model(row)
            if p.is_pending_validation_by_one:
                result_list.append(p)
        return result_list


class Report(models.Model):
    version_UUID = models.CharField(max_length=36, primary_key=True, help_text='UUID randomly generated on '
                                                'phone to identify each unique report version. Must be exactly 36 '
                                                'characters (32 hex digits plus 4 hyphens).')
    version_number = models.IntegerField(db_index=True, help_text='The report version number. Should be an integer that increments '
                                                   'by 1 for each repor version. Note that the user keeps only the '
                                                   'most recent version on the device, but all versions are stored on the server.')
    user = models.ForeignKey(TigaUser, help_text='user_UUID for the user sending this report. Must be exactly 36 '
                                                 'characters (32 hex digits plus 4 hyphens) and user must have '
                                                 'already registered this ID.')
    report_id = models.CharField(db_index=True, max_length=4, help_text='4-digit alpha-numeric code generated on user phone to '
                                                         'identify each unique report from that user. Digits should '
                                                         'lbe randomly drawn from the set of all lowercase and '
                                                         'uppercase alphabetic characters and 0-9, but excluding 0, '
                                                         'o, and O to avoid confusion if we ever need user to be able to refer to a report ID in correspondence with MoveLab (as was previously the case when we had them sending samples).')
    server_upload_time = models.DateTimeField(auto_now_add=True, help_text='Date and time on server when report '
                                                                           'uploaded. (Automatically generated by '
                                                                           'server.)')
    phone_upload_time = models.DateTimeField(help_text='Date and time on phone when it uploaded fix. Format '
                                                       'as ECMA '
                                                       '262 date time string (e.g. "2014-05-17T12:34:56'
                                                       '.123+01:00".')
    creation_time = models.DateTimeField(help_text='Date and time on phone when first version of report was created. '
                                                   'Format '
                                                       'as ECMA '
                                                       '262 date time string (e.g. "2014-05-17T12:34:56'
                                                       '.123+01:00".')
    version_time = models.DateTimeField(help_text='Date and time on phone when this version of report was created. '
                                                  'Format '
                                                       'as ECMA '
                                                       '262 date time string (e.g. "2014-05-17T12:34:56'
                                                       '.123+01:00".')
    TYPE_CHOICES = (('adult', 'Adult'), ('site', 'Breeding Site'), ('mission', 'Mission'),)
    type = models.CharField(max_length=7, choices=TYPE_CHOICES, help_text="Type of report: 'adult', 'site', "
                                                                         "or 'mission'.", )
    mission = models.ForeignKey(Mission, blank=True, null=True, help_text='If this report was a response to a '
                                                                          'mission, the unique id field of that '
                                                                          'mission.')
    LOCATION_CHOICE_CHOICES = (('current', "Current location detected by user's device"), ('selected',
                                                                                           'Location selected by '
                                                                                           'user from map'),
                               ('missing', 'No location choice submitted - should be used only for missions'))
    location_choice = models.CharField(max_length=8, choices=LOCATION_CHOICE_CHOICES, help_text='Did user indicate '
                                                                                                'that report relates '
                                                                                                'to current location '
                                                                                                'of phone ("current") or to a location selected manually on the map ("selected")? Or is the choice missing ("missing")')
    current_location_lon = models.FloatField(blank=True, null=True, help_text="Longitude of user's current location. "
                                                                              "In decimal degrees.")
    current_location_lat = models.FloatField(blank=True, null=True, help_text="Latitude of user's current location. "
                                                                              "In decimal degrees.")
    selected_location_lon = models.FloatField(blank=True, null=True, help_text="Latitude of location selected by "
                                                                               "user on map. "
                                                                              "In decimal degrees.")
    selected_location_lat = models.FloatField(blank=True, null=True, help_text="Longitude of location selected by "
                                                                               "user on map. "
                                                                              "In decimal degrees.")
    note = models.TextField(blank=True, help_text='Note user attached to report.')
    package_name = models.CharField(db_index=True, max_length=400, blank=True, help_text='Name of tigatrapp package from which this '
                                                                          'report was submitted.')
    package_version = models.IntegerField(db_index=True, blank=True, null=True, help_text='Version number of tigatrapp package from '
                                                                           'which this '
                                                                          'report was submitted.')
    device_manufacturer = models.CharField(max_length=200, blank=True, help_text='Manufacturer of device from which '
                                                                                'this '
                                                                          'report was submitted.')
    device_model = models.CharField(max_length=200, blank=True, help_text='Model of device from '
                                                                         'which this '
                                                                          'report was submitted.')
    os = models.CharField(max_length=200, blank=True, help_text='Operating system of device from which this '
                                                                          'report was submitted.')
    os_version = models.CharField(max_length=200, blank=True, help_text='Operating system version of device from '
                                                                        'which this '
                                                                          'report was submitted.')
    os_language = models.CharField(max_length=10, blank=True, help_text='Language setting of operating system on '
                                                                         'device from '
                                                                        'which this '
                                                                          'report was submitted. 2-digit '
                                                                        'ISO-639-1 language code.')
    app_language = models.CharField(max_length=10, blank=True, help_text='Language setting, within tigatrapp, '
                                                                        'of device '
                                                                          'from '
                                                                        'which this '
                                                                          'report was submitted. 2-digit '
                                                                        'ISO-639-1 language code.')

    hide = models.BooleanField(default=False, help_text='Hide this report from public views?')

    def __unicode__(self):
        return self.version_UUID

    def get_lat(self):
        if self.location_choice == 'selected' and self.selected_location_lat is not None:
            return self.selected_location_lat
        else:
            return self.current_location_lat

    def get_lon(self):
        if self.location_choice == 'selected' and self.selected_location_lon is not None:
            return self.selected_location_lon
        else:
            return self.current_location_lon

    def get_tigaprob(self):
        these_responses = self.responses.only('answer').values('answer').iterator()
        response_score = 0
        total = 0
        for response in these_responses:
            total += 1
            if 'Y' in response['answer'] or 'S' in response['answer']:
                response_score += 1
            elif 'No' in response.values():
                response_score -= 1
        if total == 0:
            total = 1
        return float(response_score)/total

    def get_tigaprob_cat(self):
        return int(round(2.499999 * self.get_tigaprob(), 0))

    def get_response_html(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID).order_by('question')
        result = ''
        for this_response in these_responses:
            result = result + '<br/>' + this_response.question + '&nbsp;' + this_response.answer
        return result

    def get_response_string(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID).order_by('question')
        result = ''
        for this_response in these_responses:
            result = result + '{' + this_response.question + ' ' + this_response.answer + '}'
        return result

    def get_tigaprob_text(self):
        if self.tigaprob == 1.0:
            return _('High')
        elif 0.0 < self.tigaprob < 1.0:
            return _('Medium')
        else:
            return _('Low')

    def get_site_type(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = ''
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer
        return result

    def get_site_type_trans(self):
        if self.embornals:
            return _('storm-drain')
        if self.fonts:
            return _('Fountain')
        if self.basins:
            return _('Basin')
        if self.wells:
            return _('Well')
        if self.other:
            return _('Other')

    def get_site_embornals(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer.startswith('Embornal') or this_response.answer.startswith('Sumidero') or this_response.answer.startswith('Storm')
        return result

    def get_site_fonts(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer.startswith('Font') or this_response.answer.startswith('Fountain') or this_response.answer.startswith('Fuente')
        return result

    def get_site_basins(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer.startswith('Basin') or this_response.answer.startswith('Basses') or this_response.answer.startswith('Balsa') or this_response.answer.startswith('Bassa') or this_response.answer.startswith('Small basin') or 'balsas' in this_response.answer
        return result

    def get_site_buckets(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer.startswith('Bucket') or this_response.answer.startswith('Small container') or this_response.answer.startswith('Bidones') or this_response.answer.startswith('Recipiente') or this_response.answer.startswith('Recipient') or this_response.answer.startswith('Bidons')
        return result

    def get_site_wells(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer == 'Well' or this_response.answer == 'Pozos' or \
                    this_response.answer == 'Pous'
        return result

    def get_site_other(self):
        these_responses = ReportResponse.objects.filter(report__version_UUID=self.version_UUID)
        result = False
        for this_response in these_responses:
            if this_response.question.startswith('Tipo') or this_response.question.startswith('Selecciona') or \
                    this_response.question.startswith('Type'):
                result = this_response.answer == 'Other' or this_response.answer == 'Altres' or \
                    this_response.answer == 'Otros'
        return result

    def get_site_cat(self):
        if self.get_site_embornals():
            return 0
        elif self.get_site_fonts():
            return 1
        elif self.get_site_basins():
            return 2
        elif self.get_site_buckets():
            return 3
        elif self.get_site_wells():
            return 4
        else:
            return 5

    def get_masked_lat(self):
        if self.lat is not None:
            return round(floor(self.lat/.05)*.05, 2)
        else:
            return None

    def get_masked_lon(self):
        if self.lon is not None:
            return round(floor(self.lon/.05)*.05, 2)
        else:
            return None

    def get_n_photos(self):
        these_photos = Photo.objects.filter(report__version_UUID=self.version_UUID)
        return len(these_photos)

    def get_photo_html(self):
        these_photos = Photo.objects.filter(report__version_UUID=self.version_UUID).exclude(hide=True)
        result = ''
        for photo in these_photos:
            result = result + photo.small_image_() + '&nbsp;'
        return result

    def get_photo_html_for_report_validation(self):
        these_photos = Photo.objects.filter(report__version_UUID=self.version_UUID).exclude(hide=True)
        result = ''
        for photo in these_photos:
            result += '<div id="div_for_photo_to_display_report_' + str(self.version_UUID) + '"><input type="radio" name="photo_to_display_report_' + str(self.version_UUID) + '" id="' + str(photo.id) + '" value="' + str(photo.id) + '"/>Display this photo on public map:</div><br><div style="border: 1px solid #333333;margin:1px;">' + photo.medium_image_for_validation_() + '</div><br>'
        return result

    def get_photo_html_for_report_validation_completed(self):
        these_photos = Photo.objects.filter(report__version_UUID=self.version_UUID).exclude(hide=True)
        result = ''
        for photo in these_photos:
            result += '<div id="' + str(photo.id) + '" style="border: 1px solid #333333;margin:1px;">' + photo.medium_image_for_validation_() + '</div><br>'
        return result

    def get_formatted_date(self):
        return self.version_time.strftime("%d-%m-%Y %H:%M")

    def get_is_deleted(self):
        result = False
        all_versions = Report.objects.filter(report_id=self.report_id).order_by('version_number')
        if all_versions[0].version_number == -1:
            result = True
        return result

    def get_other_versions(self):
        all_versions = Report.objects.filter(report_id=self.report_id).exclude(version_UUID=self.version_UUID).order_by('version_number')
        result = ''
        for this_version in all_versions:
            result += '<a href="/admin/tigaserver_app/report/%s">Version %s</a> ' % (this_version.version_UUID, this_version.version_number)
        return result

    def get_is_latest(self):
        if self.version_number == -1:
            return False
        elif Report.objects.filter(report_id=self.report_id).count() == 1:
            return True
        else:
            all_versions = Report.objects.filter(report_id=self.report_id).order_by('version_number')
            if all_versions[0].version_number == -1:
                return False
            elif all_versions.reverse()[0].version_number == self.version_number:
                return True

    def get_which_is_latest(self):
        all_versions = Report.objects.filter(report_id=self.report_id).order_by('version_number')
        return all_versions.reverse()[0].version_UUID

    def get_crowdcrafting_score(self):
        if self.type not in ('site', 'adult'):
            return None
        these_photos = self.photos.exclude(hide=True).annotate(n_responses=Count('crowdcraftingtask__responses')).filter(n_responses__gte=30)
        if these_photos.count() == 0:
            return None
        if self.type == 'site':
            scores = map(lambda x: x.crowdcraftingtask.site_validation_score, these_photos.iterator())
        else:
            scores = map(lambda x: x.crowdcraftingtask.tiger_validation_score, these_photos.iterator())
        if scores is None or len(scores) == 0:
            return None
        else:
            return max(scores)

    def get_is_crowd_validated(self):
        if self.get_crowdcrafting_score():
            return self.get_crowdcrafting_score() > settings.CROWD_VALIDATION_CUTOFF
        else:
            return False

    def get_is_crowd_contravalidated(self):
        if self.get_crowdcrafting_score():
            return self.get_crowdcrafting_score() <= settings.CROWD_VALIDATION_CUTOFF
        else:
            return False

    def get_validated_photo_html(self):
        result = ''
        if self.type not in ('site', 'adult'):
            return result
        these_photos = self.photos.exclude(hide=True).annotate(n_responses=Count('crowdcraftingtask__responses')).filter(n_responses__gte=30)
        for photo in these_photos:
            result += '<br>' + photo.small_image_() + '<br>'
        return result

    def show_on_map(self):
        if self.creation_time.year == 2014:
            return True
        else:
            return (not self.photos.all().exists()) or ((ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).count() >= 3 or ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exists()) and self.get_final_expert_status() == 1)

    # note that I am making this really get movelab or expert annotation,
    # but keeping name for now to avoid refactoring templates
    def get_movelab_annotation(self):
        if self.creation_time.year == 2014:
            if self.type == 'adult':
                max_movelab_annotation = MoveLabAnnotation.objects.filter(task__photo__report=self).exclude(hide=True).order_by('tiger_certainty_category').last()
                if max_movelab_annotation is not None:
                    return {'tiger_certainty_category': max_movelab_annotation.tiger_certainty_category, 'crowdcrafting_score_cat': max_movelab_annotation.task.tiger_validation_score_cat, 'crowdcrafting_n_response': max_movelab_annotation.task.crowdcrafting_n_responses, 'edited_user_notes': max_movelab_annotation.edited_user_notes, 'photo_html': max_movelab_annotation.task.photo.popup_image()}
        else:
            if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).count() >= 3 or ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True):
                result = {'edited_user_notes': self.get_final_public_note()}
                if self.get_final_photo_html():
                    result['photo_html'] = self.get_final_photo_html().popup_image()
                    if hasattr(self.get_final_photo_html(), 'crowdcraftingtask'):
                        result['crowdcrafting_score_cat'] = self.get_final_photo_html().crowdcraftingtask.tiger_validation_score_cat
                        result['crowdcrafting_n_response'] = self.get_final_photo_html().crowdcraftingtask.crowdcrafting_n_responses
                if self.type == 'adult':
                    result['tiger_certainty_category'] = self.get_final_expert_score()
                elif self.type == 'site':
                    result['site_certainty_category'] = self.get_final_expert_score()
                return result
        return None

    def get_movelab_score(self):
        if self.type != 'adult':
            return None
        max_movelab_annotation = MoveLabAnnotation.objects.filter(task__photo__report=self).exclude(hide=True).order_by('tiger_certainty_category').last()
        if max_movelab_annotation is None:
            return None
        return max_movelab_annotation.tiger_certainty_category

    def get_crowd_score(self):
        if self.type != 'adult':
            return None
        max_movelab_annotation = MoveLabAnnotation.objects.filter(task__photo__report=self).exclude(hide=True).order_by('tiger_certainty_category').last()
        if max_movelab_annotation is None:
            return None
        return max_movelab_annotation.task.tiger_validation_score_cat

    def get_tiger_responses(self):
        if self.type != 'adult':
            return None
        these_responses = self.responses.all()
        result = {}
        if these_responses.filter(Q(question=u'Is it small and black with white stripes?')|Q(question=u'\xc9s petit i negre amb ratlles blanques?')|Q(question=u'\xbfEs peque\xf1o y negro con rayas blancas?')).count() > 0:
            q1r = these_responses.get(Q(question=u'Is it small and black with white stripes?')|Q(question=u'\xc9s petit i negre amb ratlles blanques?')|Q(question=u'\xbfEs peque\xf1o y negro con rayas blancas?')).answer
            result['q1_response'] = 1 if q1r in [u'S\xed', u'Yes'] else -1 if q1r == u'No' else 0
        if these_responses.filter(Q(question=u'Does it have a white stripe on the head and thorax?')|Q(question=u'T\xe9 una ratlla blanca al cap i al t\xf2rax?')|Q(question=u'\xbfTiene una raya blanca en la cabeza y en el t\xf3rax?')).count() > 0:
            q2r = these_responses.get(Q(question=u'Does it have a white stripe on the head and thorax?')|Q(question=u'T\xe9 una ratlla blanca al cap i al t\xf2rax?')|Q(question=u'\xbfTiene una raya blanca en la cabeza y en el t\xf3rax?')).answer
            result['q2_response'] = 1 if q2r in [u'S\xed', u'Yes'] else -1 if q2r == u'No' else 0
        if these_responses.filter(Q(question=u'Does it have white stripes on the abdomen and legs?')|Q(question=u"T\xe9 ratlles blanques a l'abdomen i a les potes?")|Q(question=u'\xbfTiene rayas blancas en el abdomen y en las patas?')).count() > 0:
            q3r = these_responses.get(Q(question=u'Does it have white stripes on the abdomen and legs?')|Q(question=u"T\xe9 ratlles blanques a l'abdomen i a les potes?")|Q(question=u'\xbfTiene rayas blancas en el abdomen y en las patas?')).answer
            result['q3_response'] = 1 if q3r in [u'S\xed', u'Yes'] else -1 if q3r == u'No' else 0
        return result

    def get_site_responses(self):
        if self.type != 'site':
            return None
        these_responses = self.responses.all()
        result = {}
        if self.package_name == 'ceab.movelab.tigatrapp' and self.package_version >= 10:
            if these_responses.filter(Q(question=u'Is it in a public area?')|Q(question=u'\xbfSe encuentra en la v\xeda p\xfablica?')|Q(question=u'Es troba a la via p\xfablica?')).count() > 0:
                q1r = these_responses.get(Q(question=u'Is it in a public area?')|Q(question=u'\xbfSe encuentra en la v\xeda p\xfablica?')|Q(question=u'Es troba a la via p\xfablica?')).answer
                result['q1_response_new'] = 1 if q1r in [u'S\xed', u'Yes'] else -1

            if these_responses.filter(Q(question=u'Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?')|Q(question=u'Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?')|Q(question=u'Cont\xe9 aigua estancada y/o larves o pupes de mosquit (qualsevol esp\xe8cie)?')).count() > 0:
                q2r = these_responses.get(Q(question=u'Does it contain stagnant water and/or mosquito larvae or pupae (any mosquito species)?')|Q(question=u'Contiene agua estancada y/o larvas o pupas de mosquito (cualquier especie)?')|Q(question=u'Cont\xe9 aigua estancada y/o larves o pupes de mosquit (qualsevol esp\xe8cie)?')).answer
                result['q2_response_new'] = 1 if (u'S\xed' in q2r or u'Yes' in q2r) else -1

            if these_responses.filter(Q(question=u'Have you seen adult mosquitoes nearby (<10 meters)?')|Q(question=u'\xbfHas visto mosquitos cerca (a <10 metros)?')|Q(question=u'Has vist mosquits a prop (a <10metres)?')).count() > 0:
                q3r = these_responses.get(Q(question=u'Have you seen adult mosquitoes nearby (<10 meters)?')|Q(question=u'\xbfHas visto mosquitos cerca (a <10 metros)?')|Q(question=u'Has vist mosquits a prop (a <10metres)?')).answer
                result['q3_response_new'] = 1 if q3r in [u'S\xed', u'Yes'] else -1
            return result
        else:
            if these_responses.filter(Q(question=u'Does it have stagnant water inside?')|Q(question=u'\xbfContiene agua estancada?')|Q(question=u'Cont\xe9 aigua estancada?')).count() > 0:
                q1r = these_responses.get(Q(question=u'Does it have stagnant water inside?')|Q(question=u'\xbfContiene agua estancada?')|Q(question=u'Cont\xe9 aigua estancada?')).answer
                result['q1_response'] = 1 if q1r in [u'S\xed', u'Yes'] else -1 if q1r == u'No' else 0
            if these_responses.filter(Q(question=u'Have you seen mosquito larvae (not necessarily tiger mosquito) inside?')|Q(question=u'\xbfContiene larvas o pupas de mosquito (de cualquier especie)?')|Q(question=u'Cont\xe9 larves o pupes de mosquit (de qualsevol esp\xe8cie)?')).count() > 0:
                q2r = these_responses.get(Q(question=u'Have you seen mosquito larvae (not necessarily tiger mosquito) inside?')|Q(question=u'\xbfContiene larvas o pupas de mosquito (de cualquier especie)?')|Q(question=u'Cont\xe9 larves o pupes de mosquit (de qualsevol esp\xe8cie)?')).answer
                result['q2_response'] = 1 if q2r in [u'S\xed', u'Yes'] else -1 if q2r == u'No' else 0
            return result

    def get_creation_year(self):
        return self.creation_time.year

    def get_creation_month(self):
        return self.creation_time.month

    def get_creation_date(self):
        return self.creation_time.date()

    def get_creation_day_since_launch(self):
        return (self.creation_time - settings.START_TIME).days

    def get_n_expert_report_annotations_tiger_certainty(self):
        n = ExpertReportAnnotation.objects.filter(report=self).exclude(tiger_certainty_category=None).count()
        return n

    def get_n_expert_report_annotations_site_certainty(self):
        n = ExpertReportAnnotation.objects.filter(report=self).exclude(site_certainty_category=None).count()
        return n

    def get_mean_expert_adult_score(self):
        sum_scores = 0
        mean_score = -3
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, tiger_certainty_category__isnull=True).count() > 0 and ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, tiger_certainty_category__isnull=False).count() == 0:
            return -3
        super_scores = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exclude(tiger_certainty_category__isnull=True).values_list('tiger_certainty_category', flat=True)
        if super_scores:
            for this_score in super_scores:
                if this_score:
                    sum_scores += this_score
            mean_score = sum_scores / float(super_scores.count())
            return mean_score
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, tiger_certainty_category__isnull=True).count() > 0 and ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, tiger_certainty_category__isnull=False).count() == 0:
            return -3
        expert_scores = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).exclude(tiger_certainty_category__isnull=True).values_list('tiger_certainty_category', flat=True)
        if expert_scores:
            for this_score in expert_scores:
                if this_score:
                    sum_scores += this_score
            mean_score = sum_scores/float(expert_scores.count())
        return mean_score

    def get_mean_expert_site_score(self):
        sum_scores = 0
        mean_score = -3
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, site_certainty_category__isnull=True).count() > 0 and ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, site_certainty_category__isnull=False).count() == 0:
            return -3
        super_scores = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exclude(site_certainty_category__isnull=True).values_list('site_certainty_category', flat=True)
        if super_scores:
            for this_score in super_scores:
                if this_score:
                    sum_scores += this_score
            mean_score = sum_scores / float(super_scores.count())
            return mean_score
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, site_certainty_category__isnull=True).count() > 0 and ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, site_certainty_category__isnull=False).count() == 0:
            return -3
        expert_scores = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).exclude(site_certainty_category__isnull=True).values_list('site_certainty_category', flat=True)
        if expert_scores:
            for this_score in expert_scores:
                if this_score:
                    sum_scores += this_score
            mean_score = sum_scores/float(expert_scores.count())
        return mean_score

    def get_final_expert_score(self):
        score = -3
        if self.type == 'site':
            score = self.get_mean_expert_site_score()
        elif self.type == 'adult':
            score = self.get_mean_expert_adult_score()
        if score is not None:
            return int(round(score))
        else:
            return -3

    def get_final_expert_category(self):
        if self.type == 'site':
            return dict([(-3, 'Unclassified')] + list(SITE_CATEGORIES))[self.get_final_expert_score()]
        elif self.type == 'adult':
            return dict([(-3, 'Unclassified')] + list(TIGER_CATEGORIES))[self.get_final_expert_score()]

    def get_final_expert_status(self):
        result = 1
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, status=-1).exists():
            result = -1
        elif ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, status=0).exists():
            result = 0
        elif ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, status=1).exists():
            result = 1
        elif ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, status=-1).exists():
            result = -1
        elif ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, status=0).exists():
            result = 0
        elif ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, status=1).exists():
            result = 1
        return result

    def get_final_expert_status_text(self):
        return dict(STATUS_CATEGORIES)[self.get_final_expert_status()]

    def get_final_expert_status_bootstrap(self):
        result = '<span data-toggle="tooltip" data-placement="bottom" title="' + self.get_final_expert_status_text() + '" class="' + ('glyphicon glyphicon-eye-open' if self.get_final_expert_status() == 1 else ('glyphicon glyphicon-flag' if self.get_final_expert_status() == 0 else 'glyphicon glyphicon-eye-close')) + '"></span>'
        return result

    def get_is_expert_validated(self):
        return ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).count() >= 3

    def get_final_expert_score_bootstrap(self):
        result = '<span class="label label-default" style="background-color:' + ('red' if self.get_final_expert_score() == 2 else ('orange' if self.get_final_expert_score() == 1 else ('white' if self.get_final_expert_score() == 0 else ('grey' if self.get_final_expert_score() == -1 else 'black')))) + ';">' + self.get_final_expert_category() + '</span>'
        return result

    def get_who_has(self):
        result = ''
        these_annotations = ExpertReportAnnotation.objects.filter(report=self)
        i = these_annotations.count()
        for ano in these_annotations:
            result += ano.user.username + (': validated' if ano.validation_complete else ': pending')
            i -= 1
            if i > 0:
                result += ', '
        return result

    def get_who_has_bootstrap(self):
        result = ''
        these_annotations = ExpertReportAnnotation.objects.filter(report=self)
        i = these_annotations.count()
        for ano in these_annotations:
            result += '<span class="label ' + ('label-success' if ano.validation_complete else 'label-warning') + '" data-toggle="tooltip" data-placement="bottom" title="' + (('validated by ' + ano.user.username) if ano.validation_complete else ('pending with ' + ano.user.username)) + '">' + ano.user.username + ' <span class="glyphicon ' + ('glyphicon-check' if ano.validation_complete else 'glyphicon-time') + '"></span></span>'
            i -= 1
            if i > 0:
                result += ' '
        return result

    def is_pending_validation_by_one(self):
        these_annotations = ExpertReportAnnotation.objects.filter(report=self)
        not_validated_count = 0
        for ano in these_annotations:
            if not ano.validation_complete:
                not_validated_count += 1
        return not_validated_count == 1


    def get_expert_score_reports_bootstrap(self, user=None):
        result = ''
        these_annotations = ExpertReportAnnotation.objects.filter(report=self)
        if user:
            these_annotations.exclude(user=user)
        for ano in these_annotations:
            result += '<div class="table-responsive"><table class="table table-condensed"><tbody><tr>'
            result += '<td>' + ano.user.username + '</td>'
            result += '<td>' + ano.get_status_bootstrap() + '</td>'
            result += '<td>' + ano.get_score_bootstrap() + '</td>'
            result += '<td><a role="button" data-toggle="collapse" href="#expert_collapse' + ano.report.version_UUID + str(ano.id) + '" aria-expanded="false" aria-controls="expert_collapse' + ano.report.version_UUID + str(ano.id) + '"><i class="fa fa-plus-square-o"></i></a></td>'
            result += '</tr></tbody></table></div>'
            result += '<div class="collapse" id="expert_collapse' + ano.report.version_UUID + str(ano.id) + '"><div class="well">'
            result += '<div class="table-responsive"><table class="table table-condensed"><tbody>'
            result += '<tr><td><strong>Expert:</strong></td><td>' + ano.user.username + '</td></tr>'
            result += '<tr><td><strong>Last Edited:</strong></td><td>' + ano.last_modified.strftime("%d %b %Y %H:%m") + ' UTC</td>></tr>'
            if self.type == 'adult':
                result += '<tr><td><strong>Tiger Notes:</strong></td><td>' + ano.tiger_certainty_notes + '</td></tr>'
            elif self.type == 'site':
                result += '<tr><td><strong>Site Notes:</strong></td><td>' + ano.site_certainty_notes + '</td></tr>'
            result += '<tr><td><strong>Selected photo:</strong></td><td>' + (ano.best_photo.popup_image() if ano.best_photo else "") + '</td></tr>'
            result += '<tr><td><strong>Edited User Notes:</strong></td><td>' + ano.edited_user_notes + '</td></tr>'
            result += '<tr><td><strong>Message To User:</strong></td><td>' + ano.message_for_user + '</td></tr>'
            result += '</tbody></table></div></div></div>'
        return result

    def get_expert_annotations_html(self, this_user):
        result = ''
        for ano in self.expert_report_annotations.exclude(user=this_user):
            result += '<p>User: ' + ano.user.username + ', Last Edited: ' + str(ano.last_modified) + '</p>'
            if self.type == 'adult':
                result += '<p>Tiger Certainty: ' + (ano.get_tiger_certainty_category_display() if ano.get_tiger_certainty_category_display() else "") + '</p>'
                result += '<p>Tiger Notes: ' + ano.tiger_certainty_notes + '</p>'
            elif self.type == 'site':
                result += '<p>Site Certainty: ' + (ano.get_site_certainty_category_display() if ano.get_site_certainty_category_display() else "") + '</p>'
                result += '<p>Site Notes: ' + ano.site_certainty_notes + '</p>'
            result += '<p>Status: ' + str(ano.statu) + '</p>'
        return result

    def get_final_photo_html(self):
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exists():
            super_photos = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True, best_photo__isnull=False).values_list('best_photo', flat=True)
            if super_photos:
                winning_photo_id = Counter(super_photos).most_common()[0][0]
                if winning_photo_id:
                    winning_photo = Photo.objects.filter(pk=winning_photo_id)
                    if winning_photo and winning_photo.count() > 0:
                        return Photo.objects.get(pk=winning_photo_id)
            return None
        else:
            expert_photos = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True, best_photo__isnull=False).values_list('best_photo', flat=True)
            if expert_photos:
                winning_photo_id = Counter(expert_photos).most_common()[0][0]
                if winning_photo_id:
                    winning_photo = Photo.objects.filter(pk=winning_photo_id)
                    if winning_photo and winning_photo.count() > 0:
                        return Photo.objects.get(pk=winning_photo_id)
            return None

    def get_final_public_note(self):
        if ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exists():
            super_notes = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exclude(edited_user_notes='').values_list('edited_user_notes', flat=True)
            if super_notes:
                winning_note = Counter(super_notes).most_common()[0][0]
                if winning_note:
                    return winning_note
            return None
        else:
            expert_notes = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).exclude(edited_user_notes='').values_list('edited_user_notes', flat=True)
            if expert_notes:
                winning_note = Counter(expert_notes).most_common()[0][0]
                if winning_note:
                    return winning_note
            return None

    def get_final_note_to_user_html(self):
        notes = None
        super_notes = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='superexpert', validation_complete=True, revise=True).exclude(message_for_user='').values_list('message_for_user', flat=True)
        if super_notes:
            notes = super_notes
        else:
            expert_notes = ExpertReportAnnotation.objects.filter(report=self, user__groups__name='expert', validation_complete=True).exclude(message_for_user='').values_list('message_for_user', flat=True)
            if expert_notes:
                notes = expert_notes
        if notes:
            n = len(notes)
            if n == 1:
                return '<strong>Message from Expert:</strong> ' + notes[0]
            elif n > 1:
                result = ''
                i = 1
                for note in notes:
                    result += '<strong>Message from Expert ' + str(i) + ':</strong> ' + note
                    if i < n:
                        result += '<br>'
                return result
        else:
            return ''

    lon = property(get_lon)
    lat = property(get_lat)
    tigaprob = property(get_tigaprob)
    tigaprob_cat = property(get_tigaprob_cat)
    tigaprob_text = property(get_tigaprob_text)
    site_type = property(get_site_type)
    site_type_trans = property(get_site_type_trans)
    site_cat = property(get_site_cat)
    embornals = property(get_site_embornals)
    fonts = property(get_site_fonts)
    basins = property(get_site_basins)
    buckets = property(get_site_buckets)
    wells = property(get_site_wells)
    other = property(get_site_other)
    masked_lat = property(get_masked_lat)
    masked_lon = property(get_masked_lon)
    n_photos = property(get_n_photos)
    photo_html = property(get_photo_html)
    photo_html_for_report_validation= property(get_photo_html_for_report_validation)
    formatted_date = property(get_formatted_date)
    response_html = property(get_response_html)
    response_string = property(get_response_string)
    deleted = property(get_is_deleted)
    other_versions = property(get_other_versions)
    latest_version = property(get_is_latest)
    visible = property(show_on_map)
    movelab_annotation = property(get_movelab_annotation)
    movelab_score = property(get_movelab_score)
    crowd_score = property(get_crowd_score)
    tiger_responses = property(get_tiger_responses)
    site_responses = property(get_site_responses)
    creation_date = property(get_creation_date)
    creation_day_since_launch = property(get_creation_day_since_launch)
    creation_year = property(get_creation_year)
    creation_month = property(get_creation_month)

    objects = ReportManager()

    class Meta:
        unique_together = ("user", "version_UUID")


class ReportResponse(models.Model):
    report = models.ForeignKey(Report, related_name='responses', help_text='Report to which this response is ' \
                                                                          'associated.')
    question = models.CharField(max_length=1000, help_text='Question that the user responded to.')
    answer = models.CharField(max_length=1000, help_text='Answer that user selected.')

    def __unicode__(self):
        return str(self.id)


def make_image_uuid(path):
    def wrapper(instance, filename):
        extension = filename.split('.')[-1]
        filename = "%s.%s" % (uuid.uuid4(), extension)
        return os.path.join(path, filename)
    return wrapper


def make_uuid():
    return str(uuid.uuid4())


class Photo(models.Model):
    """
    Photo uploaded by user.
    """
    photo = models.ImageField(upload_to=make_image_uuid('tigapics'), help_text='Photo uploaded by user.')
    report = models.ForeignKey(Report, related_name='photos', help_text='Report and version to which this photo is associated (36-digit '
                                                 'report_UUID).')
    hide = models.BooleanField(default=False, help_text='Hide this photo from public views?')
    uuid = models.CharField(max_length=36, default=make_uuid)

    def __unicode__(self):
        return self.photo.name

    def get_user(self):
        return self.report.user

    def get_date(self):
        return self.report.version_time.strftime("%d-%m-%Y %H:%M")

    def get_small_path(self):
        return self.photo.path.replace('tigapics/', 'tigapics_small/')

    def get_popup_path(self):
        return self.photo.path.replace('tigapics/', 'tigapics_popups/')

    def get_small_url(self):
        if os.path.isfile(self.photo.path):
            if not os.path.isfile(self.get_small_path()):
                try:
                    im = Image.open(self.photo.path)
                    try:
                        im.thumbnail((120, 120), Image.ANTIALIAS)
                    except IOError:
                        im.thumbnail((120, 120), Image.NEAREST)
                    im.save(self.get_small_path())
                except IOError:
                    return ""
            return self.photo.url.replace('tigapics/', 'tigapics_small/')

    def get_popup_url(self):
        if os.path.isfile(self.photo.path):
            if not os.path.isfile(self.get_popup_path()):
                try:
                    im = Image.open(self.photo.path)
                    try:
                        im.thumbnail((180, 180), Image.ANTIALIAS)
                    except IOError:
                        im.thumbnail((180, 180), Image.NEAREST)
                    im.save(self.get_popup_path())
                except IOError:
                    return ""
            return self.photo.url.replace('tigapics/', 'tigapics_popups/')

    def small_image_(self):
        return '<a href="{0}"><img src="{1}"></a>'.format(self.photo.url, self.get_small_url())

    small_image_.allow_tags = True

    def popup_image(self):
        return '<a href="{0}" target="_blank"><img src="{1}"></a>'.format(self.photo.url, self.get_popup_url())

    popup_image.allow_tags = True

    def get_medium_path(self):
        return self.photo.path.replace('tigapics/', 'tigapics_medium/')

    def get_medium_url(self):
        if os.path.isfile(self.photo.path):
            if not os.path.isfile(self.get_medium_path()):
                try:
                    im = Image.open(self.photo.path)
                    try:
                        im.thumbnail((460, 460), Image.ANTIALIAS)
                    except IOError:
                        im.thumbnail((460, 460), Image.NEAREST)
                    im.save(self.get_medium_path())
                except IOError:
                    return ""
            return self.photo.url.replace('tigapics/', 'tigapics_medium/')

    def medium_image_(self):
        return '<a href="{0}"><img src="{1}"></a>'.format(self.photo.url, self.get_medium_url())

    def medium_image_for_validation_(self):
        return '<a target="_blank" href="{0}"><img src="{1}"></a>'.format(self.photo.url, self.get_medium_url())


    medium_image_.allow_tags = True

    user = property(get_user)
    date = property(get_date)


class Fix(models.Model):
    """
    Location fix uploaded by user.
    """
    user_coverage_uuid = models.CharField(blank=True, null=True, max_length=36, help_text='UUID randomly generated on '
                                                                            'phone to identify each unique user, '
                                                                            'but only within the coverage data so '
                                                                            'that privacy issues are not raised by '
                                                                            'linking this to the report data.'
                                                                            '. Must be exactly 36 '
                                                                            'characters (32 hex digits plus 4 hyphens).')

    fix_time = models.DateTimeField(help_text='Date and time when fix was recorded on phone. Format as ECMA '
                                              '262 date time string (e.g. "2014-05-17T12:34:56'
                                              '.123+01:00".')
    server_upload_time = models.DateTimeField(auto_now_add=True, help_text='Date and time registered by server when '
                                                                           'it received fix upload. Automatically '
                                                                           'generated by server.')
    phone_upload_time = models.DateTimeField(help_text='Date and time on phone when it uploaded fix. Format '
                                                       'as ECMA '
                                                       '262 date time string (e.g. "2014-05-17T12:34:56'
                                                       '.123+01:00".')
    masked_lon = models.FloatField(help_text='Longitude rounded down to nearest 0.5 decimal degree (floor(lon/.5)*.5)'
                                             '.')
    masked_lat = models.FloatField(help_text='Latitude rounded down to nearest 0.5 decimal degree (floor(lat/.5)*.5).')
    power = models.FloatField(null=True, blank=True, help_text='Power level of phone at time fix recorded, '
                                                               'expressed as proportion of full charge. Range: 0-1.')

    def __unicode__(self):
        result = 'NA'
        if self.user_coverage_uuid is not None:
            result = self.user_coverage_uuid
        return result

    class Meta:
        verbose_name = "fix"
        verbose_name_plural = "fixes"


class Configuration(models.Model):
    id = models.AutoField(primary_key=True, help_text='Auto-incremented primary key record ID.')
    samples_per_day = models.IntegerField(help_text="Number of randomly-timed location samples to take per day.")
    creation_time = models.DateTimeField(help_text='Date and time when this configuration was created by MoveLab. '
                                                   'Automatically generated when record is saved.',
                                         auto_now_add=True)

    def __unicode__(self):
        return str(self.samples_per_day)


class CoverageArea(models.Model):
    lat = models.FloatField()
    lon = models.FloatField()
    n_fixes = models.PositiveIntegerField()
    last_modified = models.DateTimeField(auto_now=True)
    latest_report_server_upload_time = models.DateTimeField()
    latest_fix_id = models.PositiveIntegerField()

    def __unicode__(self):
        return str(self.id)

    class Meta:
        unique_together = ("lat", "lon")


class CoverageAreaMonth(models.Model):
    lat = models.FloatField()
    lon = models.FloatField()
    year = models.IntegerField()
    month = models.IntegerField()
    n_fixes = models.PositiveIntegerField()
    last_modified = models.DateTimeField(auto_now=True)
    latest_report_server_upload_time = models.DateTimeField()
    latest_fix_id = models.PositiveIntegerField()

    def __unicode__(self):
        return str(self.id)

    class Meta:
        unique_together = ("lat", "lon", "year", "month")